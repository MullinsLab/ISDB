#!/usr/bin/env perl
use 5.014;
use strict;
use warnings;
use utf8;
use open qw< :std :encoding(UTF-8) >;
use FindBin qw< $Bin >;
use lib "$Bin/../lib", "$Bin/../local/lib/perl5";
use LWP::UserAgent;
use LWP::Protocol::Net::Curl;
use JSON::MaybeXS;
use ISDB::Config;

=encoding UTF-8

=head1 NAME

cache-known-issues-trello - Fetch a list of known issues with your ISDB from
Trello and output a summary as JSON

=head1 SYNOPSIS

    # Normally this is done for you by ./bin/generate-website
    ./bin/cache-known-issues-trello > cache/issues.json

=head1 DESCRIPTION

This program fetches all the cards in a L<Trello|https://trello.com> list using
the Trello API and writes out a summary of them as JSON to stdout.

The output is loaded by the website template in order to include a handy list
of known issues list on the website.

Even on error this program outputs an empty JSON array so that downstream
consumers of its output don't have to do make special considerations.

=head1 CONFIGURATION

This script requires you to do a brief dance to get a scoped basic auth token
for Trello with your own permissions.  You'll then put your credentials into a
config file.

Find your public app key by visiting L<https://trello.com/app-key>.

Generate a secret app token by visiting

    https://trello.com/1/authorize?key=YOUR_PUBLIC_KEY&name=isdb-known-issues&response_type=token&scope=read&expiration=never

Be sure to replace I<YOUR_PUBLIC_KEY> with the key you found in the first step.

Put both of these credentials in a C<config_local.yaml> (or C<.json>, C<.xml>,
or C<.conf>) file, under a top-level item C<issues>, as items called
C<public_key> and C<app_token> respectively.  Then put a Trello list ID in
another item C<list_id>, also under C<issues>.  Finally, make sure you have a
C<service> item under C<issues> which is set to C<trello>.

An example C<config_local.yaml> configured for Trello issues:

    ---
    issues:
      service: trello
      public_key: ddce269a1e3d054cae349621c198dd52
      app_token: c157a79031e1c40f85931829bc5fc552d3b07384d113edec49eaa6238ad5ff00
      list_id: 50a2fabfdd276f573ff97ace

=cut

my $wrote_output = 0;

my $auth  = ISDB::Config->new->conf->{issues};
my $key   = $auth->{public_key};
my $token = $auth->{app_token};
my $list  = $auth->{list_id};

die "You must first configure Trello details in config_local.yaml.\n\n",
    "Read \`perldoc ", __FILE__, "\` for more details.\n\n"
        unless $key and $token and $list;

my $ua  = LWP::UserAgent->new;
my $url = "https://api.trello.com/1/lists/$list/cards?key=$key&token=$token";
my $res = $ua->get($url);

if ($res->is_success) {
    my $cards = decode_json($res->decoded_content);
    my @out;
    for my $card (@$cards) {
        push @out, {
            name => $card->{name},
            url => $card->{shortUrl},
        };
    }
    say JSON->new->pretty->canonical->encode(\@out);
    $wrote_output = 1;
} else {
    warn $res->status_line, "\n";
    warn $res->decoded_content =~ s/^/  /gmr, "\n"
        if grep { defined and length } $res->decoded_content;
    die "API request unsuccessful",
        ($res->code == 401 ? " (Bad credentials?)" : ""),
        "\n";
}

END {
    unless ($wrote_output) {
        warn "Failed to fetch known issues\n";
        say "[]";
    }
}
