#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;
use utf8;
use open qw< :std :encoding(UTF-8) >;
use FindBin qw< $Bin >;
use lib "$Bin/../lib", "$Bin/../local/lib/perl5";
use Getopt::Long::Descriptive;
use ISDB::Template;
use ISDB::Exporter;
use Path::Tiny;
use JSON::MaybeXS;

my ($opt, $usage) = describe_options(
    '%c --output=directory [--find-exports=directory] template.tt [another.tt]',
    [],
    [ "Renders the provided templates and outputs the results into the given directory" ],
    [],
    [ 'output|o=s',     "writes the filled template to the given directory as template.html" ],
    [ 'find-exports=s', "looks for exports in the given directory and provides metadata to the template" ],
    [ 'find-versions=s',"looks for all version.json files underneath the given directory and provides metadata to the template" ],
    [ 'var=s@',         "define a template variable like «--var foo=bar» for simple values or «--var foo\@bar.json» to read JSON for complex values" ],
    [ 'help',           "print usage message and exit" ],
);

print($usage->text), exit(!$opt->help)
    if $opt->help or not @ARGV or not $opt->output;

my $args = {};

if ($opt->find_exports) {
    my $exporter = ISDB::Exporter->new( output_path => path($opt->find_exports) );
    my @exports  = $exporter->find_metadata;

    # Turn paths relative to the template
    for my $export (@exports) {
        for my $format (values %{ $export->{formats} }) {
            $format->{path} = path($format->{path})
                ->absolute($opt->find_exports)
                ->relative($opt->output)
                ->stringify;
        }
    }
    $args->{exports} = \@exports;
}

if ($opt->find_versions) {
    my $versions = path($opt->find_versions)->visit(
        sub {
            my ($path, $versions) = @_;
            $versions->{$path} = decode_json($path->slurp_raw)
                if $path->is_file
               and $path->basename eq "version.json";
        },
        { recurse => 1 },
    );
    $args->{versions} = [ values %$versions ];
}

# Read in passed template vars
for my $var (@{ $opt->var || [] }) {
    my ($name, $op, $value) = split /([=@])/, $var, 2;
    $value = decode_json( path($value)->slurp_raw )
        if $op eq "@";
    $args->{$name} = $value;
}

for my $source (@ARGV) {
    my $input  = path($source);
    my $output = path($opt->output)
        ->child( $input->basename(".tt") . ".html" )
        ->openw_utf8;

    say "Rendering ", $input->realpath->relative;
    print { $output } ISDB::Template->fill($source, $args);
}
