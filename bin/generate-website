#!/bin/bash
set -e -o pipefail
shopt -s nullglob

function abs-path() {
    pushd "$1" >/dev/null
        pwd
    popd >/dev/null
}

function usage() {
    cat <<.
usage: $(basename $0) [options] <output-directory>

Generates a static website for an ISDB instance into <output-directory>.

The database to connect to is controlled by the normal PostgreSQL environment
variables PGHOST, PGUSER, PGDATABASE, etc.

Web configuration options may be changed in config_local.yaml or in a separate
file of your choosing specified by the environment variable ISDB_CONFIG.  Paths
specified in configuration files may be relative to the config file itself.

When iterating on website customizations for an existing site, it's often
useful to pass --skip-exports and --skip-cached.

Options:

   --compare            Compare new exports to old exports and only replace old
                        files if the new ones are different.

   --freeze-as <name>   Generate a frozen version of the website using the
                        provided name.

   --skip-exports       Don't update exports; use existing ones.

   --skip-docs          Don't update documentation; use existing pages.

   --skip-stats         Don't update cached stats; use existing ones.

   --skip-cached        Don't update any cache files; use existing ones.
                        Implies --skip-stats.

   -h --help            Show this usage information.
.
}

bin=$(abs-path $(dirname $0))
base=$bin/..

version_name=latest
run_exports=yes
refresh_stats=yes
refresh_cached=yes
refresh_docs=yes

for arg; do
    case "$arg" in
        -h|--help)
            usage
            exit 0;;
        --compare)
            export_args="--compare"
            shift;;
        --freeze-as)
            version_name="$2"
            version_args="--frozen"
            shift 2;;
        --skip-exports)
            run_exports=no
            shift;;
        --skip-stats)
            refresh_stats=no
            shift;;
        --skip-cached)
            refresh_cached=no
            shift;;
        --skip-docs)
            refresh_docs=no
            shift;;
        --)
            shift;
            break;;
    esac
done

output=$1
if [[ -z $output ]]; then
    usage
    exit 1
fi

if [[ $version_name == latest ]]; then
    template_args="--find-versions=$output/frozen"
else
    output=$output/frozen/$version_name
fi

exports=$output/exports/

mkdir -p $output

echo "Output to: $output"

echo "Writing version metadata: $version_name"
$bin/version-metadata --name $version_name $version_args > $output/version.json

if [[ $run_exports == yes ]]; then
    echo "Exporting data"
    $bin/export $export_args $exports

    echo "Exporting BED for Genome Browser"
    mkdir -p $exports/tracks
    $bin/export-bed --in-vivo  > $exports/tracks/in-vivo.bed
    $bin/export-bed --in-vitro > $exports/tracks/in-vitro.bed

    echo "Exporting GFF for each gene"
    $bin/update-gff-per-gene $exports/gff-per-gene/

    echo "Zipping up GFF per gene"
    pushd $exports >/dev/null
        $bin/zipsync -q gff-per-gene.zip gff-per-gene/
    popd >/dev/null
fi

mkdir -p $output/cache/

if [[ $refresh_cached == yes ]]; then

    if [[ $refresh_stats == yes ]]; then
        echo "Caching stats"
        $bin/cache-stats > $output/cache/stats.json
    fi

    echo "Caching table metadata"
    $bin/table-metadata > $output/cache/table-metadata.json

    echo "Caching PubMed info"
    $bin/cache-pubmed-info > $output/cache/pubmed.json

    # Known issues
    service=$($bin/read-config issues.service || true)
    if [[ -z $service ]]; then
        service=trello
        echo "Warning: No issues service specified, falling back to default of $service"
    fi

    echo "Caching current Known Issues from $service"
    if ! env PATH="$bin:$PATH" cache-known-issues-$service > $output/cache/issues.json; then
        echo "Warning: Couldn't fetch known issues, but proceeding anyway."
        echo "Hint: Look at the messages between this line and the line «Caching current Known Issues» above."
    fi

    if ! json_pp -json_opt utf8 < $output/cache/issues.json >/dev/null 2>&1; then
        echo "Warning: Invalid issues.json, overwriting with an empty stub"
        echo "[]" > $output/cache/issues.json
    fi
fi

echo "Copying static assets"
cp -a $base/web/assets $output

echo "Rendering templates"
$bin/fill-template \
    --output=$output \
    --find-exports=$exports \
    $template_args \
    --var version@$output/version.json \
    --var stats@$output/cache/stats.json \
    --var pubmed_info@$output/cache/pubmed.json \
    --var issues@$output/cache/issues.json \
    $base/web/*.tt

mkdir -p $output/doc
$bin/fill-template \
    --output=$output/doc \
    --var version@$output/version.json \
    --var stats@$output/cache/stats.json \
    --var tables@$output/cache/table-metadata.json \
    --var webroot=../ \
    $base/web/doc/Tables.tt

if [[ $refresh_docs == yes ]]; then
    echo "Generating documentation"
    doc_failed=0

    docs=($base/doc/*.md)
    local_doc_dir=$( $bin/read-config web.local_documentation || true )
    if [[ -n $local_doc_dir ]]; then
        docs+=($local_doc_dir/*.md)
    fi

    for md in ${docs[@]}; do
        echo "Converting $(basename $md)"

        docname=$(basename $md .md)
        tmp=$(mktemp -d)

        # Copy the web template used for each documentation page; the copy means
        # that the basename preservation done by fill-template Just Works.
        cp $base/web/pandoc/page.tt $tmp/$docname.tt

        # Process the Markdown document into three parts (metadata, body, and head)
        # using Pandoc templates.  These will be consumed by the web template we
        # copied above.
        for part in metadata.json head.html body.html; do
            if ! $bin/pandoc --base-header-level=3 -t html5+smart --template $base/web/pandoc/$part.tmpl $md > $tmp/$part; then
                echo "error: pandoc failed processing $md into $tmp/$part (exited $?)" >&2
                doc_failed=1
                continue 2
            fi
        done

        # Style Markdown tables with Bootstrap
        perl -pi -e 's/<table>/<table class="table table-condensed table-striped">/' $tmp/body.html

        # Render page into output dir
        $bin/fill-template \
            --output=$output/doc \
            --var version@$output/version.json \
            --var webroot=../ \
            --var template_root=$base/web/ \
            --var metadata@$tmp/metadata.json \
            $tmp/$docname.tt \
            >/dev/null
    done

    if [[ $doc_failed -eq 1 ]]; then
        echo "Warning: Couldn't generate documentation but continuing on…"
    fi

    echo "Indexing documentation"
    $bin/index-documentation $local_doc_dir $base/doc > $output/cache/documentation.json

    $bin/fill-template \
        --output=$output/doc \
        --var version@$output/version.json \
        --var documentation@$output/cache/documentation.json \
        --var webroot=../ \
        --var pandoc_failed=$doc_failed \
        $base/web/doc/index.tt
fi
